---
# To get more information of the rules: [http://eslint.org/docs/rules/]()
root: true

env:
  node: true
  es6: true

parserOptions:
  sourceType: script
  ecmaVersion: 6

rules:
  # Possible Errors
  # -----
  # These rules relate to possible syntax or logic errors in JavaScript code:
  no-cond-assign: [2, always]
  no-console: 1
  no-constant-condition: 2
  no-control-regex: 2
  no-debugger: 2
  no-dupe-args: 2
  no-dupe-keys: 2
  no-duplicate-case: 2
  no-empty-character-class: 2
  no-empty: 2
  no-ex-assign: 2
  no-extra-boolean-cast: 2
  no-extra-parens: 1
  no-extra-semi: 2
  no-func-assign: 2
  no-inner-declarations: [2, functions]
  no-invalid-regexp: 2
  no-irregular-whitespace: 2
  no-negated-in-lhs: 2
  no-obj-calls: 2
  no-prototype-builtins: 2
  no-regex-spaces: 1
  no-sparse-arrays: 2
  no-unexpected-multiline: 2
  no-unreachable: 2
  no-unsafe-finally: 2
  use-isnan: 2
  valid-jsdoc: [1, {requireParamDescription: false, requireReturnDescription: false}]
  valid-typeof: 2

  # Best Practices
  # -----
  # These rules relate to better ways of doing things to help you avoid problems:
  accessor-pairs: [1, {setWithoutGet: true, getWithoutSet: false}]
  array-callback-return: 2
  block-scoped-var: 1
  complexity: [1, {max: 5}]
  consistent-return: 1
  curly: 2
  default-case: 1
  dot-location: [2, property]
  dot-notation: [2, {allowPattern: '^[a-z]+(_[a-z]+)+$'}]
  eqeqeq: [2, allow-null]
  guard-for-in: 2
  no-alert: 2
  no-caller: 2
  no-case-declarations: 2
  no-div-regex: 2
  no-else-return: 2
  no-empty-function: 2
  no-empty-pattern: 2
  no-eq-null: 0
  no-eval: 2
  no-extend-native: 2
  no-extra-bind: 2
  no-extra-label: 2
  # Add `// fall through` for intentional use.
  no-fallthrough: 1
  no-floating-decimal: 2
  no-implicit-coercion: 2
  no-implicit-globals: 2
  no-implied-eval: 2
  # If any framework / library requires this then disable it.
  no-invalid-this: 0
  no-iterator: 2
  no-labels: 2
  no-lone-blocks: 2
  no-loop-func: 2
  no-magic-numbers: [1, {ignore: [0, 1], ignoreArrayIndexes: true, detectObjects: true}]
  no-multi-spaces: [1, {exceptions: {VariableDeclarator: true, AssignmentExpression: true, ImportDeclaration: true}}]
  no-multi-str: 2
  no-native-reassign: 2
  no-new-func: 2
  no-new-wrappers: 2
  no-new: 0
  no-octal-escape: 2
  no-octal: 2
  no-param-reassign: [2, {props: false}]
  no-proto: 2
  no-redeclare: [2, {builtinGlobals: true}]
  no-return-assign: [2, always]
  no-script-url: 2
  no-self-assign: 2
  no-self-compare: 2
  no-sequences: 2
  no-throw-literal: 0
  no-unmodified-loop-condition: 2
  no-unused-expressions: [2, {allowShortCircuit: true}]
  no-unused-labels: 2
  no-useless-call: 2
  no-useless-concat: 2
  no-useless-escape: 2
  no-void: 0
  no-warning-comments: [1, {location: anywhere}]
  no-with: 2
  radix: 2
  vars-on-top: 0
  wrap-iife: 2
  yoda: [2, never, {exceptRange: true}]

  # Strict Mode
  # -----
  # These rules relate to strict mode directives:
  strict: [2, global]

  # Variables
  # -----
  # These rules relate to variable declarations:
  init-declarations: 0
  no-catch-shadow: 2
  no-delete-var: 2
  no-label-var: 2
  no-restricted-globals: 2
  no-shadow-restricted-names: 2
  no-shadow: 2
  no-undef-init: 2
  no-undef: 2
  no-undefined: 2
  no-unused-vars: [2, {vars: all, args: after-used}]
  no-use-before-define: 2

  # Node.js and CommonJS
  # -----
  # These rules relate to code running in Node.js, or in browsers with CommonJS:
  callback-return: [1, [callback, cb]]
  global-require: 2
  handle-callback-err: 1
  no-mixed-requires: 0
  no-new-require: 2
  no-path-concat: 2
  no-process-env: 0
  no-process-exit: 2
  no-restricted-modules: 0
  no-sync: 0

  # Stylistic Issues
  # -----
  # These rules relate to style guidelines, and are therefore quite subjective:
  array-bracket-spacing: [2, never]
  block-spacing: [2, always]
  brace-style: [2, 1tbs, {allowSingleLine: true}]
  camelcase: [2, {properties: always}]
  comma-dangle: [2, always-multiline]
  comma-spacing: [2, {before: false, after: true}]
  comma-style: [2, last, {exceptions: {VariableDeclaration: true}}]
  computed-property-spacing: [2, never]
  consistent-this: [1, _this]
  eol-last: 0
  func-names: 2
  func-style: [2, expression, {allowArrowFunctions: true}]
  id-blacklist: 0
  id-length: 0
  id-match: 0
  indent: [2, 2, {SwitchCase: 1}]
  jsx-quotes: 0
  key-spacing: 0
  keyword-spacing: [2, {before: true, after: true, overrides: {}}]
  # Leave this to Git.
  linebreak-style: 0
  lines-around-comment: 0
  max-depth: [1, {max: 4}]
  max-len: 0
  max-lines: 0
  max-nested-callbacks: [1, {max: 3}]
  max-params: 0
  max-statements-per-line: [2, {max: 2}]
  max-statements: [1, {max: 15}, {ignoreTopLevelFunctions: true}]
  multiline-ternary: 0
  new-cap: [1, {capIsNew: true, newIsCap: true}]
  new-parens: 2
  newline-after-var: 0
  newline-before-return: 0
  newline-per-chained-call: 0
  no-array-constructor: 2
  no-bitwise: 2
  no-continue: 2
  no-inline-comments: 0
  no-lonely-if: 2
  no-mixed-operators: 2
  no-mixed-spaces-and-tabs: 2
  no-multiple-empty-lines: [2, {max: 3, maxEOF: 1, maxBOF: 0}]
  no-negated-condition: 0
  no-nested-ternary: 2
  no-new-object: 2
  no-plusplus: 0
  no-restricted-syntax: 0
  no-spaced-func: 2
  no-tabs: 2
  no-ternary: 0
  no-trailing-spaces: 2
  no-underscore-dangle: 0
  no-unneeded-ternary: 2
  no-whitespace-before-property: 2
  object-curly-newline: 0
  object-curly-spacing: [2, always, {objectsInObjects: true, arraysInObjects: true}]
  object-property-newline: 0
  one-var-declaration-per-line: [2, initializations]
  one-var: [2, never]
  operator-assignment: [2, always]
  operator-linebreak: [2, before]
  padded-blocks: 0
  quote-props: [2, consistent-as-needed]
  quotes: [2, single, {avoidEscape: true}]
  require-jsdoc: 0
  semi-spacing: [2, {before: false, after: true}]
  semi: [2, always]
  sort-vars: 0
  space-before-blocks: [2, always]
  space-before-function-paren: [2, never]
  space-in-parens: [2, never]
  space-infix-ops: [2, {int32Hint: true}]
  space-unary-ops: [2, {words: true, nonwords: false}]
  spaced-comment: [2, always]
  unicode-bom: [2, never]
  wrap-regex: 0

  # ECMAScript 6
  # -----
  # These rules relate to ES6, also known as ES2015:
  arrow-body-style: 0
  arrow-parens: 0
  arrow-spacing: 2
  constructor-super: 2
  generator-star-spacing: [2, before]
  no-class-assign: 2
  no-confusing-arrow: 2
  no-const-assign: 2
  no-dupe-class-members: 2
  no-duplicate-imports: 2
  no-new-symbol: 2
  no-restricted-imports: 2
  no-this-before-super: 2
  no-useless-computed-key: 2
  no-useless-constructor: 2
  no-useless-rename: [2, {ignoreDestructuring: true}]
  no-var: 1
  object-shorthand: 0
  prefer-arrow-callback: 0
  prefer-const: 1
  prefer-reflect: 1
  prefer-rest-params: 1
  prefer-spread: 1
  prefer-template: 0
  require-yield: 2
  rest-spread-spacing: [2, never]
  sort-imports: 0
  template-curly-spacing: [2, never]
  yield-star-spacing: [2, before]
